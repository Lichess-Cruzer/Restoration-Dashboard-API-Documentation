"use strict";(self.webpackChunkrrg_api_documentation=self.webpackChunkrrg_api_documentation||[]).push([[3549],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>u});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),c=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(r),u=n,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return r?a.createElement(h,i(i({ref:t},l),{},{components:r})):a.createElement(h,i({ref:t},l))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5239:(e,t,r)=>{r.d(t,{Z:()=>n});var a=r(7294);const n=e=>{let{collapsible:t,level:r,row:n,request:o,response:i,parameter:s="",dataType:p="string",required:c=!1,description:l="",...d}=e;const[m,u]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("tr",{className:`param-row ${r?`level--${r}`:""} ${t?"collapsible "+(m?"expanded":""):""}`,onClick:()=>{t&&u(!m)}},a.createElement("td",null,a.createElement("div",{className:"param-container"},a.createElement("div",{className:"parameter"},t?a.createElement("i",{className:"bi bi-chevron-"+(m?"down":"right")}):a.createElement(a.Fragment,null),a.createElement("span",null,s)),a.createElement("span",{className:"data-type"},a.createElement("code",null,p)))),o?a.createElement("td",{className:c?"required":""},c?"true":"false"):a.createElement(a.Fragment,null),a.createElement("td",null,l)),m?d.children:a.createElement(a.Fragment,null))}},9062:(e,t,r)=>{r.d(t,{Z:()=>i});var a=r(7462),n=r(7294),o=r(5239);const i=e=>{let{...t}=e;const[r,i]=(0,n.useState)(!0);return n.createElement(o.Z,(0,a.Z)({response:!0},t))}},680:(e,t,r)=>{r.d(t,{Z:()=>p});var a=r(7462),n=r(7294),o=r(9062),i=r(5582);const s=[{parameter:"_id",description:"The system ID to reference the request document. Can be used to retrieve an order by ID."},{parameter:"date",description:"An ISO string representing the date the order was entered into the system."},{parameter:"orderId",description:"(external) The unique identifier (if provided) to identify the order with the your system."},{parameter:"groupId",description:"(external) Set by your application when order is created."},{parameter:"customerId",description:"(external) Set by your application when order is created."},{parameter:"invoiceId",description:"(external) Set by your application when order is created."},{parameter:"sku",description:"(external) Set by your application when order is created."},{parameter:"treesRequired",dataType:"number",description:"The number of trees to be paired with this order."},{parameter:"filled",dataType:"boolean",description:"A boolean marked true if the order has been matched to the number of trees required to fill this order."}],p=e=>{let{level:t=0,populateTrees:r=!1,...p}=e;const[c,l,d,m]=(0,n.useMemo)((()=>!0===r?["array: object","Array of tree objects, representing the trees matched to this order.","object","A tree item."]:["array: string","Array of tree IDs, which are references to the trees matched to this order.","string","A tree reference ID."]),[r]);return n.createElement(n.Fragment,null,s.map((e=>n.createElement(o.Z,(0,a.Z)({key:e.parameter},e,{level:t})))),n.createElement(o.Z,{parameter:"trees",dataType:c,description:l,collapsible:!0,level:t},n.createElement(o.Z,{parameter:"trees[i]",dataType:d,description:m,collapsible:r,level:t+1},r?n.createElement(n.Fragment,null,n.createElement(i.Z,{level:t+2,populateRefs:r})):n.createElement(n.Fragment,null))))}},4954:(e,t,r)=>{r.d(t,{Z:()=>p});var a=r(7462),n=r(7294),o=r(9062);const i=[{parameter:"_id",description:"The reference ID for this restoration site."},{parameter:"name",description:"The name of the restoration site."},{parameter:"description",description:"A description of the restoration site."},{parameter:"workHoursCreated",dataType:"number",description:"The number of work hours created on this restoration site."},{parameter:"workersEmployed",dataType:"number",description:"The number of workers employed on this restoration site."}],s=[{parameter:"region",description:"The region the restoration site is located in."},{parameter:"province",description:"The province the restoration site is located in."},{parameter:"city",description:"The city the restoration site is located in."},{parameter:"partnerName",description:"The name of the partner that runs the restoration site."},{parameter:"siteType",description:"The type of the restoration site."},{parameter:"acreage",description:"How many acres the restoration site covers."},{parameter:"hectaresToRestore",description:"The number of hectares to be restored."},{parameter:"totalPlantQuantity",description:"The total number of plants being planted at the restoration site."},{parameter:"season",description:"Season of planting for the restoration site."},{parameter:"restorationTypes",description:"The types of restoration taking place at the site."},{parameter:"siteStatus",description:"The planting status of the site."},{parameter:"acresRestored",description:"The number of acres that have been restored by efforts at the site."},{parameter:"treesPlantedPerDay",description:"Approximate number of trees planted per day at the site."}],p=e=>{let{level:t=0,...r}=e;return n.createElement(n.Fragment,null,i.map((e=>n.createElement(o.Z,(0,a.Z)({key:e.parameter},e,{level:t})))),n.createElement(o.Z,{parameter:"mapImg",description:"If present, may contain a url to a top-down map view of the site.",level:t,dataType:"object",collapsible:!0},n.createElement(o.Z,{parameter:"publicUrl",description:"URL to retrieve the map image.",level:t+1})),n.createElement(o.Z,{parameter:"metadata",description:"Additional site metadata (some fields may not be present).",level:t,dataType:"object",collapsible:!0},s.map((e=>n.createElement(o.Z,(0,a.Z)({key:e.parameter},e,{level:t+1}))))))}},5582:(e,t,r)=>{r.d(t,{Z:()=>c});var a=r(7462),n=r(7294),o=r(9062),i=r(4954),s=r(3725);const p=[{parameter:"_id",description:"The reference ID for this tree."},{parameter:"status",dataType:"number",description:"The status of this tree. 100 means the tree is in escrow, 200 means the tree is released from escrow, and 300 means the tree has been planted."}],c=e=>{let{level:t=0,populateRefs:r=!1,...c}=e;return n.createElement(n.Fragment,null,p.map((e=>n.createElement(o.Z,(0,a.Z)({key:e.parameter},e,{level:t})))),r?n.createElement(n.Fragment,null,n.createElement(o.Z,{parameter:"site",description:"The details for the restoration site where the tree is located.",collapsible:!0,level:t},n.createElement(i.Z,{level:t+1})),n.createElement(o.Z,{parameter:"treeType",description:"The tree type details for this tree.",collapsible:!0,level:t},n.createElement(s.Z,{level:t+1}))):n.createElement(n.Fragment,null,n.createElement(o.Z,{parameter:"site",description:"The reference ID for the restoration site that this tree is located at."}),n.createElement(o.Z,{parameter:"treeType",description:"The reference ID for the tree type details of this tree."})))}},3725:(e,t,r)=>{r.d(t,{Z:()=>s});var a=r(7462),n=r(7294),o=r(9062);const i=[{parameter:"_id",description:"The reference ID for this tree type."},{parameter:"name",description:"The name of this tree type."},{parameter:"species",description:"The species of this tree type"},{parameter:"lbsCarbonPerYear",dataType:"number",description:"The pounds of carbon this tree type sequesters per year."},{parameter:"yearsOfLife",dataType:"number",description:"The average number of years that carbon sequestering is measured for this tree type, from the date it is first planted."}],s=e=>{let{level:t=0,...r}=e;return n.createElement(n.Fragment,null,i.map((e=>n.createElement(o.Z,(0,a.Z)({key:e.parameter},e,{level:t})))))}},6739:(e,t,r)=>{r.r(t),r.d(t,{OptionalParamDescription:()=>d,assets:()=>c,contentTitle:()=>s,default:()=>T,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var a=r(7462),n=(r(7294),r(3905)),o=r(680);const i={},s="POST order",p={unversionedId:"rest-api-reference/accounts-client-id/post-order",id:"rest-api-reference/accounts-client-id/post-order",title:"POST order",description:"Endpoint to post an order to the system.",source:"@site/docs/rest-api-reference/accounts-client-id/post-order.mdx",sourceDirName:"rest-api-reference/accounts-client-id",slug:"/rest-api-reference/accounts-client-id/post-order",permalink:"/Restoration-Dashboard-API-Documentation/docs/rest-api-reference/accounts-client-id/post-order",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GET treeType",permalink:"/Restoration-Dashboard-API-Documentation/docs/rest-api-reference/accounts-client-id/get-tree-type-by-id"},next:{title:"Tutorial - Basics",permalink:"/Restoration-Dashboard-API-Documentation/docs/category/tutorial---basics"}},c={},l=[{value:"Request",id:"request",level:2},{value:"Response",id:"response",level:2}],d=e=>{let{parameter:t,trimmed:r}=e;return`Optional by default, but may be required for your account. Set this field if you want to denote the order belonging to a ${r} identifier. Useful for querying orders with a specific "${t}" at a later time.`},m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",t)},u=m("BaseUrlPath"),h=m("RequestParamTable"),f=m("RequestParamRow"),y=m("ResponseParamTable"),b={toc:l,OptionalParamDescription:d};function T(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},b,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"post-order"},"POST order"),(0,n.kt)("p",null,"Endpoint to post an order to the system."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"This endpoint is rate-limited to 300 requests per minute.")),(0,n.kt)("h2",{id:"request"},"Request"),(0,n.kt)(u,{method:"post",mdxType:"BaseUrlPath"},"orders"),(0,n.kt)(h,{json:!0,mdxType:"RequestParamTable"},(0,n.kt)(f,{parameter:"treesRequired",dataType:"number",description:'The number of trees to match to this order. If not provided, this will default to the account-specific default "treesRequired" (usually 1).',mdxType:"RequestParamRow"}),(0,n.kt)(f,{parameter:"orderId",required:!0,description:"A string representing your system's UUID for the order. This field is required. You can use this UUID later to find the tree(s) matched to the order.",mdxType:"RequestParamRow"}),(0,n.kt)(f,{parameter:"customerId",description:d({parameter:"customerId",trimmed:"customer"}),mdxType:"RequestParamRow"}),(0,n.kt)(f,{parameter:"groupId",description:d({parameter:"groupId",trimmed:"group"}),mdxType:"RequestParamRow"}),(0,n.kt)(f,{parameter:"invoiceId",description:d({parameter:"invoiceId",trimmed:"invoice"}),mdxType:"RequestParamRow"}),(0,n.kt)(f,{parameter:"sku",description:d({parameter:"sku",trimmed:"SKU"}),mdxType:"RequestParamRow"})),(0,n.kt)("h2",{id:"response"},"Response"),(0,n.kt)(y,{mdxType:"ResponseParamTable"},(0,n.kt)(o.Z,{mdxType:"OrderParamRows"})))}T.isMDXComponent=!0}}]);