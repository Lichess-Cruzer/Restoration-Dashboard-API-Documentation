"use strict";(self.webpackChunkrrg_api_documentation=self.webpackChunkrrg_api_documentation||[]).push([[2150],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),d=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(r),u=n,h=m["".concat(p,".").concat(u)]||m[u]||l[u]||i;return r?a.createElement(h,o(o({ref:t},c),{},{components:r})):a.createElement(h,o({ref:t},c))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5239:(e,t,r)=>{r.d(t,{Z:()=>n});var a=r(7294);const n=e=>{let{collapsible:t,level:r,row:n,request:i,response:o,parameter:s="",dataType:p="string",required:d=!1,description:c="",...l}=e;const[m,u]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("tr",{className:`param-row ${r?`level--${r}`:""} ${t?"collapsible "+(m?"expanded":""):""}`,onClick:()=>{t&&u(!m)}},a.createElement("td",null,a.createElement("div",{className:"param-container"},a.createElement("div",{className:"parameter"},t?a.createElement("i",{className:"bi bi-chevron-"+(m?"down":"right")}):a.createElement(a.Fragment,null),a.createElement("span",null,s)),a.createElement("span",{className:"data-type"},a.createElement("code",null,p)))),i?a.createElement("td",{className:d?"required":""},d?"true":"false"):a.createElement(a.Fragment,null),a.createElement("td",null,c)),m?l.children:a.createElement(a.Fragment,null))}},9062:(e,t,r)=>{r.d(t,{Z:()=>o});var a=r(7462),n=r(7294),i=r(5239);const o=e=>{let{...t}=e;const[r,o]=(0,n.useState)(!0);return n.createElement(i.Z,(0,a.Z)({response:!0},t))}},680:(e,t,r)=>{r.d(t,{Z:()=>p});var a=r(7462),n=r(7294),i=r(9062),o=r(5582);const s=[{parameter:"_id",description:"The system ID to reference the request document. Can be used to retrieve an order by ID."},{parameter:"date",description:"An ISO string representing the date the order was entered into the system."},{parameter:"orderId",description:"(external) The unique identifier (if provided) to identify the order with the your system."},{parameter:"groupId",description:"(external) Set by your application when order is created."},{parameter:"customerId",description:"(external) Set by your application when order is created."},{parameter:"invoiceId",description:"(external) Set by your application when order is created."},{parameter:"sku",description:"(external) Set by your application when order is created."},{parameter:"treesRequired",dataType:"number",description:"The number of trees to be paired with this order."},{parameter:"filled",dataType:"boolean",description:"A boolean marked true if the order has been matched to the number of trees required to fill this order."}],p=e=>{let{level:t=0,populateTrees:r=!1,...p}=e;const[d,c,l,m]=(0,n.useMemo)((()=>!0===r?["array: object","Array of tree objects, representing the trees matched to this order.","object","A tree item."]:["array: string","Array of tree IDs, which are references to the trees matched to this order.","string","A tree reference ID."]),[r]);return n.createElement(n.Fragment,null,s.map((e=>n.createElement(i.Z,(0,a.Z)({key:e.parameter},e,{level:t})))),n.createElement(i.Z,{parameter:"trees",dataType:d,description:c,collapsible:!0,level:t},n.createElement(i.Z,{parameter:"trees[i]",dataType:l,description:m,collapsible:r,level:t+1},r?n.createElement(n.Fragment,null,n.createElement(o.Z,{level:t+2,populateRefs:r})):n.createElement(n.Fragment,null))))}},4954:(e,t,r)=>{r.d(t,{Z:()=>p});var a=r(7462),n=r(7294),i=r(9062);const o=[{parameter:"_id",description:"The reference ID for this restoration site."},{parameter:"name",description:"The name of the restoration site."},{parameter:"description",description:"A description of the restoration site."},{parameter:"workHoursCreated",dataType:"number",description:"The number of work hours created on this restoration site."},{parameter:"workersEmployed",dataType:"number",description:"The number of workers employed on this restoration site."}],s=[{parameter:"region",description:"The region the restoration site is located in."},{parameter:"province",description:"The province the restoration site is located in."},{parameter:"city",description:"The city the restoration site is located in."},{parameter:"partnerName",description:"The name of the partner that runs the restoration site."},{parameter:"siteType",description:"The type of the restoration site."},{parameter:"acreage",description:"How many acres the restoration site covers."},{parameter:"hectaresToRestore",description:"The number of hectares to be restored."},{parameter:"totalPlantQuantity",description:"The total number of plants being planted at the restoration site."},{parameter:"season",description:"Season of planting for the restoration site."},{parameter:"restorationTypes",description:"The types of restoration taking place at the site."},{parameter:"siteStatus",description:"The planting status of the site."},{parameter:"acresRestored",description:"The number of acres that have been restored by efforts at the site."},{parameter:"treesPlantedPerDay",description:"Approximate number of trees planted per day at the site."},{parameter:"description",description:"The description of the site."},{parameter:"latitude",description:"The latitude the restoration site is located in."},{parameter:"longitude",description:"The longitude the restoration site is located in."},{parameter:"projectedPlantingDate",description:"The projected planting date at the site."},{parameter:"treesPerHectare",description:"Approximate number of trees per Hectare at the site."},{parameter:"actualPlantedSeason",description:"The actual planted year at the site."},{parameter:"plantingCompleted",description:"The planting completed date at the site."}],p=e=>{let{level:t=0,...r}=e;return n.createElement(n.Fragment,null,o.map((e=>n.createElement(i.Z,(0,a.Z)({key:e.parameter},e,{level:t})))),n.createElement(i.Z,{parameter:"mapImg",description:"If present, may contain a url to a top-down map view of the site.",level:t,dataType:"object",collapsible:!0},n.createElement(i.Z,{parameter:"publicUrl",description:"URL to retrieve the map image.",level:t+1})),n.createElement(i.Z,{parameter:"metadata",description:"Additional site metadata (some fields may not be present).",level:t,dataType:"object",collapsible:!0},s.map((e=>n.createElement(i.Z,(0,a.Z)({key:e.parameter},e,{level:t+1}))))))}},5582:(e,t,r)=>{r.d(t,{Z:()=>d});var a=r(7462),n=r(7294),i=r(9062),o=r(4954),s=r(3725);const p=[{parameter:"_id",description:"The reference ID for this tree."},{parameter:"status",dataType:"number",description:"The status of this tree. 100 means the tree is in escrow, 200 means the tree is released from escrow, and 300 means the tree has been planted."}],d=e=>{let{level:t=0,populateRefs:r=!1,...d}=e;return n.createElement(n.Fragment,null,p.map((e=>n.createElement(i.Z,(0,a.Z)({key:e.parameter},e,{level:t})))),r?n.createElement(n.Fragment,null,n.createElement(i.Z,{parameter:"site",description:"The details for the restoration site where the tree is located.",collapsible:!0,dataType:"object",level:t},n.createElement(o.Z,{level:t+1})),n.createElement(i.Z,{parameter:"treeType",description:"The tree type details for this tree.",collapsible:!0,level:t,dataType:"object"},n.createElement(s.Z,{level:t+1}))):n.createElement(n.Fragment,null,n.createElement(i.Z,{parameter:"site",description:"The reference ID for the restoration site that this tree is located at."}),n.createElement(i.Z,{parameter:"treeType",description:"The reference ID for the tree type details of this tree."})))}},3725:(e,t,r)=>{r.d(t,{Z:()=>s});var a=r(7462),n=r(7294),i=r(9062);const o=[{parameter:"_id",description:"The reference ID for this tree type."},{parameter:"name",description:"The name of this tree type."},{parameter:"commonName",description:"Common Name/Indigenous Name - Common names are in a variety of languages. When the English name was found, it was used. If only the indigenous name was present, it was used."},{parameter:"culturalSignificance",description:"The cultural use of each species was listed including their edible parts and medicinal uses. These can then be used to decide on species composition in an effort to provide goods for native peoples."},{parameter:"species",description:"The species of this tree type"},{parameter:"lbsCarbonPerYear",dataType:"number",description:"The pounds of carbon this tree type sequesters per year."},{parameter:"yearsOfLife",dataType:"number",description:"The average number of years that carbon sequestering is measured for this tree type, from the date it is first planted."},{parameter:"carbonWeight",dataType:"number",description:"Weight of carbon/tree(lbs) of this tree type."},{parameter:"dryWeight",dataType:"number",description:"Dryweight(lbs) of this tree type. Dryweight is defined as the mass of the tree when dried in an oven, so all moisture is removed."},{parameter:"greenWeightRoots",dataType:"number",description:"Total greenweight including roots(lb) of this tree type. Total weight of wood including above and below the surface."},{parameter:"groundWeight",dataType:"number",description:"Aboveground Weight(Lbs) of this tree type."},{parameter:"habitat",description:"Habitat of this tree type."},{parameter:"nitrogenFixing",description:"Indicates whether the species fixes nitrogen."},{parameter:"dbhRangeStart",dataType:"number",description:"Minimum DBH(in) of this tree type."},{parameter:"dbhRangeEnd",dataType:"number",description:"Maximum DBH(in) of this tree type."},{parameter:"medianDbh",dataType:"number",description:"Median DBH(ft) of this tree type."},{parameter:"heightRangeStart",dataType:"number",description:"Minimum Height(ft) of this tree type."},{parameter:"heightRangeEnd",dataType:"number",description:"Maximum Height(ft) of this tree type."},{parameter:"medianHeight",dataType:"number",description:"Median Height(ft) of this tree type."},{parameter:"elevationRangeStart",dataType:"number",description:"Start(m) of this tree type native elevation range."},{parameter:"elevationRangeEnd",dataType:"number",description:"End(m) of this tree type native elevation range."},{parameter:"medianCarbonWeight",dataType:"number",description:"Total weight(lbs) of carbon stored and sequestered in this tree type, using median DBH and height values."},{parameter:"mortalityCarbonWeight",description:"Weight(lbs) of Carbon Sequestered Adjusted to Mortality."},{parameter:"mortalityLbsCarbonPerYear",description:"Weight(lb) of Carbon Sequestered/Tree Per Year Adjusted to Mortality."},{parameter:"source",description:"Source of this tree type."},{parameter:"methodOfPlanting",description:"Planting varies from seeds, seedlings, greenwood cuttings, graftings,etc."},{parameter:"uses",description:"The uses of this tree type."},{parameter:"image",description:"The image url of this tree type.",dataType:"object",children:[{parameter:"file",dataType:"string",description:"The file path of this tree type."},{parameter:"publicUrl",dataType:"string",description:"The public image url of this tree type."}]}],s=e=>{let{level:t=0,...r}=e;return n.createElement(n.Fragment,null,o.map((e=>e.children?n.createElement(i.Z,{key:e.parameter,parameter:e.parameter,description:e.description,dataType:e.dataType,collapsible:!0,level:t},e.children.map((e=>n.createElement(i.Z,(0,a.Z)({key:e.parameter},e,{level:t+1}))))):n.createElement(i.Z,(0,a.Z)({key:e.parameter},e,{level:t})))))}},3207:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>b,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var a=r(7462),n=(r(7294),r(3905)),i=r(680);const o={},s="GET order",p={unversionedId:"rest-api-reference/accounts-client-id/get-order-by-id",id:"rest-api-reference/accounts-client-id/get-order-by-id",title:"GET order",description:"",source:"@site/docs/rest-api-reference/accounts-client-id/get-order-by-id.mdx",sourceDirName:"rest-api-reference/accounts-client-id",slug:"/rest-api-reference/accounts-client-id/get-order-by-id",permalink:"/Restoration-Dashboard-API-Documentation/docs/rest-api-reference/accounts-client-id/get-order-by-id",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GET days",permalink:"/Restoration-Dashboard-API-Documentation/docs/rest-api-reference/accounts-client-id/get-days"},next:{title:"GET orders",permalink:"/Restoration-Dashboard-API-Documentation/docs/rest-api-reference/accounts-client-id/get-orders"}},d={},c=[{value:"Request",id:"request",level:2},{value:"Response",id:"response",level:2}],l=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",t)},m=l("BaseUrlPath"),u=l("RequestParamTable"),h=l("RequestParamRow"),y=l("ResponseParamTable"),f={toc:c};function b(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"get-order"},"GET order"),(0,n.kt)("p",null,"Endpoint to retrieve an order by Order ID."),(0,n.kt)("h2",{id:"request"},"Request"),(0,n.kt)(m,{mdxType:"BaseUrlPath"},"orders/:ORDER_ID"),(0,n.kt)(u,{route:!0,mdxType:"RequestParamTable"},(0,n.kt)(h,{parameter:"ORDER_ID",required:!0,description:'A string referring to the order ID. You can pass the system "_id" for the order, or the "orderId" set by the client application.',mdxType:"RequestParamRow"})),(0,n.kt)("h2",{id:"response"},"Response"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},'Fields marked "(external)" are fields that are set by the client application when posting orders to the restoration dashboard system. These fields can be queried for equality when querying this endpoint.')),(0,n.kt)(y,{mdxType:"ResponseParamTable"},(0,n.kt)(i.Z,{populateTrees:!0,mdxType:"OrderParamRows"})))}b.isMDXComponent=!0}}]);